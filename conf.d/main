#!/bin/bash -ex

WEBROOT=/var/www/moodle
DATAROOT=/var/www/moodledata
MOOSHROOT=/var/www/moosh

DB_NAME=moodle
DB_USER=moodle
DB_PASS=$(mcookie)

ADMIN_USER=admin
ADMIN_PASS=turnkey

# convenience execution variables
MYSQL_BATCH="mysql --user=root --password=$MYSQL_PASS --batch"
MYSQL_ADMIN="mysqladmin --user=root --password=$MYSQL_PASS"

# start mysql
service mysql start

# create database
$MYSQL_ADMIN create $DB_NAME

# create database user with privileges on the database
$MYSQL_BATCH --execute "grant all privileges on $DB_NAME.* to $DB_USER@localhost identified by '$DB_PASS'; flush privileges;"

# setup apache configuration and complete installation
a2dissite 000-default
a2ensite moodle
a2enmod rewrite
a2enmod headers

# tweak php.ini as recommended by moodle
sed -Ei "/max_input_vars/ s|^;?(max_input_vars =).*|\1 5000|" /etc/php/7.4/apache2/php.ini

cd $(dirname $MOOSHROOT)
git clone https://github.com/tmuras/moosh.git
cd $MOOSHROOT
chown -R www-data:www-data $MOOSHROOT
turnkey-composer install
ln -s $MOOSHROOT/moosh.php /usr/local/bin/moosh

# download latest moodle with moosh, then unpack
cd $(dirname $WEBROOT)
moosh download-moodle
tar -C $(dirname $WEBROOT) -zxf moodle-*.tgz
rm -f moodle-*.tgz
chown -R root:root $WEBROOT

cd $WEBROOT
php admin/cli/install.php \
    --chmod=750 \
    --lang=en \
    --wwwroot="http://127.0.0.1" \
    --dataroot=$DATAROOT \
    --dbtype=mariadb \
    --dbhost=localhost \
    --dbname=$DB_NAME \
    --dbuser=$DB_USER \
    --dbpass=$DB_PASS \
    --prefix="" \
    --fullname="TurnKey Moodle" \
    --shortname=moodle \
    --adminuser=$ADMIN_USER \
    --adminpass=$ADMIN_PASS \
    --adminemail=admin@example.com \
    --upgradekey= \
    --non-interactive \
    --agree-license

chown -R www-data:www-data $DATAROOT
chown -R www-data:www-data /var/www/moodle/theme
chown root:www-data $WEBROOT/config.php

## tweak config

# configure moodle to use dynamic hostname and ssl (webroot)
sed -i "s|\$CFG->wwwroot \(.*\)|\$protocol='http://';\n\$hostname='127.0.0.1';\nif (isset(\$_SERVER['HTTPS'])) { \$protocol='https://'; }\nif (isset(\$_SERVER['HTTP_HOST'])) { \$hostname=\$_SERVER['HTTP_HOST']; }\n\$CFG->wwwroot = \$protocol.\$hostname;\n|" $WEBROOT/config.php

# prevent setting of executable paths via Admin UI (locks down possible privilege escalation)
sed -i "/'admin';$/ a \$CFG->preventexecpath = true;" $WEBROOT/config.php

# set paths to utils
mysql --defaults-extra-file=/etc/mysql/debian.cnf <<EOF
USE $DB_NAME;
UPDATE config SET value = '1' WHERE name = 'loginhttps';
UPDATE config SET value = '127.0.0.1' WHERE name = 'smtphosts';
UPDATE config SET value = 'noreply@example.com' WHERE name = 'noreplyaddress';
UPDATE config SET value = '/usr/bin/du' WHERE name = 'pathtodu';
UPDATE config SET value = '/usr/bin/aspell' WHERE name = 'aspellpath';
UPDATE config SET value = '/usr/bin/php' WHERE name = 'pathtophp';
UPDATE config SET value = '/usr/bin/dot' WHERE name = 'pathtodot';
UPDATE config SET value = '/usr/bin/gs' WHERE name = 'pathtogs';
UPDATE config SET value = '/usr/bin/pdftoppm' WHERE name = 'pathtopdftoppm';
UPDATE config SET value = '/usr/bin/python3' WHERE name = 'pathtopython';
EOF

# disable user delete - removes hyped up "critical" warning
# - see https://tracker.moodle.org/browse/MDL-67852 for more info
mysql <<EOF
USE $DB_NAME;
DELETE FROM role_capabilities WHERE capability = "tool/dataprivacy:requestdelete";
EOF

# stop mysql server
service mysql stop
